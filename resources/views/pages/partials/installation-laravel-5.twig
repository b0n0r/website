<p>Install the Clockwork library via <a href="https://getcomposer.org/">Composer</a>.</p>

<code class="block">$ composer require itsgoingd/clockwork</code>

<p>Once Clockwork is installed, you need to register the Laravel service provider, in your <code>config/app.php</code>:</p>

<code class="block">'providers' => [
	...
	Clockwork\Support\Laravel\ClockworkServiceProvider::class
]
</code>

<p>You also need to enable the Clockwork middleware, in your <code>app/Http/Kernel.php</code>:</p>

<code class="block">protected $middleware = [
	Clockwork\Support\Laravel\ClockworkMiddleware::class,
	...
]
</code>

<p>By default, Clockwork will only be available in debug mode, you can change this and other settings in the configuration file. Use the following Artisan command to publish the configuration file into your config directory:</p>

<code class="block">$ php artisan vendor:publish --provider='Clockwork\Support\Laravel\ClockworkServiceProvider'</code>

<p>Clockwork comes with a <code>clock()</code> helper function, which provides an easy way to add records to the Clockwork log and events to the timeline.</p>

<code class="block">clock()->startEvent('event_name', 'Event description.'); // event called 'Event description.' appears in Clockwork timeline tab

clock('Message text.'); // 'Message text.' appears in Clockwork log tab
logger('Message text.'); // 'Message text.' appears in Clockwork log tab as well as application log file

clock([ 'hello' => 'world' ]); // logs json representation of the array
clock(new Object()); // logs string representation of the objects if the object implements __toString magic method, logs json representation of output of toArray method if the object implements it, if neither is the case, logs json representation of the object cast to array

clock()->endEvent('event_name');
</code>

<p>If you prefer to use a Facade, add following to your <code>config/app.php</code>:</p>

<code class="block">'aliases' => array(
	...
	'Clockwork' => Clockwork\Support\Laravel\Facade::class,
)
</code>
